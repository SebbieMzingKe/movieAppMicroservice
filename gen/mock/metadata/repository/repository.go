// Code generated by MockGen. DO NOT EDIT.
// Source: metadata/internal/controller/metadata/metadata.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "movieapp.com/metadata/pkg/model"
)

// MockMetadataRepository is a mock of MetadataRepository interface.
type MockMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryMockRecorder
}

// MockMetadataRepositoryMockRecorder is the mock recorder for MockMetadataRepository.
type MockMetadataRepositoryMockRecorder struct {
	mock *MockMetadataRepository
}

// NewMockMetadataRepository creates a new mock instance.
func NewMockMetadataRepository(ctrl *gomock.Controller) *MockMetadataRepository {
	mock := &MockMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRepository) EXPECT() *MockMetadataRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetadataRepository) Get(ctx context.Context, id string) (*model.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetadataRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetadataRepository)(nil).Get), ctx, id)
}

// Put mocks base method.
func (m_2 *MockMetadataRepository) Put(ctx context.Context, id string, m *model.Metadata) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Put", ctx, id, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockMetadataRepositoryMockRecorder) Put(ctx, id, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMetadataRepository)(nil).Put), ctx, id, m)
}
